// File: Frontend/cypress/e2e/objetScreen.cy.tsimport Objet from "../../src/Types/Objet";import CategorieObjet from "../../src/Types/CategorieObjet";import EtatEchange from "../../src/Types/EtatEchange";describe('Home Component', () => {    beforeEach(() => {        cy.login();  // Using the custom login command        // Intercept the API call to get the logged user id        cy.intercept('GET', 'http://localhost:3000/api/utilisateurs/trans', {            statusCode: 200,            body: { id: 'user-123' },        }).as('fetchUtilisateurId');        // créé une liste d'objets pour les tests        let maxId: number = 0;        const objets: Objet[] = []        Object.values(CategorieObjet).forEach((categorie: string, index: number) => {            objets.push({                id: index + 1,                nom: `Objet ${index + 1}`,                description: `Description de l'objet ${index + 1}`,                categorie: categorie,                idUtilisateur: `user-${index + 2}`,                utilisateur: `User ${index + 1}`,                showInput: false,                enEchange: false,                idEchange: -1,            });            maxId = index;        });        maxId = 1 + maxId;        //ajoute 2 objet pour l'utilisateur admin        objets.push({            id: maxId,            nom: `Objet ${maxId}`,            description: `Description de l'objet ${maxId}`,            categorie: CategorieObjet.MOBILIER,            idUtilisateur: '1',            utilisateur: 'admin',            showInput: false,            enEchange: false,            idEchange: -1,        });        const maxId2 = 1 + maxId;        objets.push({            id: maxId2,            nom: `Objet ${maxId2}`,            description: `Description de l'objet ${maxId2}`,            categorie: CategorieObjet.MOBILIER,            idUtilisateur: '1',            utilisateur: 'admin',            showInput: false,            enEchange: false,            idEchange: -1        });        // ajouter des objets en échange pour les tests        const echanges = [            {                id: 1,                dateProposition: '2025-03-04T21:54:00.170511',                dateCloture: '2025-03-12T21:54:00.170511',                etatEchange: EtatEchange.ATTENTE,                proprietaireObjetPropose: {                    id: 4,                    pseudo: 'User 3',                    mdp: '',                    mail: '',                    nom: '',                    prenom: '',                },                proprietaireObjetDemande: {                    id: 1,                    pseudo: 'admin',                    mdp: 'admin',                    mail: 'admin@mail.fr',                    nom: 'admin',                    prenom: 'admin',                },                objetPropose: {                    id: 1,                    nom: 'Objet 3',                    categorie: Object.values(CategorieObjet)[2],                    description: 'Description de l\'objet 3',                    dateCreation: '',                    utilisateur: {                        id: 3,                        pseudo: 'User 3',                        mdp: '',                        mail: '',                        nom: '',                        prenom: '',                    },                    dateSuppression: null,                },                objetDemande: {                    id: maxId,                    nom: `Objet ${maxId}`,                    description: `Description de l'objet ${maxId}`,                    categorie: CategorieObjet.MOBILIER,                    dateCreation: '',                    utilisateur: {                        id: 1,                        pseudo: 'admin',                        mdp: 'admin',                        mail: 'admin@mail.fr',                        nom: 'admin',                        prenom: 'admin',                    },                    dateSuppression: null,                }            },            {                id: 1,                dateProposition: '2025-03-04T21:54:00.170511',                dateCloture: '2025-03-12T21:54:00.170511',                etatEchange: EtatEchange.ATTENTE,                proprietaireObjetPropose: {                    id: 1,                    pseudo: 'admin',                    mdp: 'admin',                    mail: 'admin@mail.fr',                    nom: 'admin',                    prenom: 'admin',                },                proprietaireObjetDemande: {                    id: 5,                    pseudo: 'User 4',                    mdp: '',                    mail: '',                    nom: '',                    prenom: '',                },                objetPropose: {                    id: 4,                    nom: 'Objet 4',                    categorie: Object.values(CategorieObjet)[3],                    description: 'Description de l\'objet 4',                    dateCreation: '',                    utilisateur: {                        id: 5,                        pseudo: 'User 4',                        mdp: '',                        mail: '',                        nom: '',                        prenom: '',                    },                    dateSuppression: null,                },                objetDemande: {                    id: maxId2,                    nom: `Objet ${maxId2}`,                    description: `Description de l'objet ${maxId2}`,                    categorie: CategorieObjet.MOBILIER,                    dateCreation: '',                    utilisateur: {                        id: 1,                        pseudo: 'admin',                        mdp: 'admin',                        mail: 'admin@mail.fr',                        nom: 'admin',                        prenom: 'admin',                    },                    dateSuppression: null,                }            }        ]        // mettre à jour les objets avec les échanges        objets.forEach((objet) => {            echanges.forEach((echange) => {                if (objet.id === echange.objetPropose.id || objet.id === echange.objetDemande.id) {                    objet.enEchange = true;                    objet.idEchange = echange.id;                }            })        });        // Intercept the API call to get objects        cy.intercept('GET', 'http://localhost:3000/api/objets', {            statusCode: 200,            body: objets,        }).as('fetchObjets');        // Assume exchanges are empty for these tests (or adapt as needed)        cy.intercept('GET', 'http://localhost:3000/api/echanges/all', {            statusCode: 200,            body: echanges,        }).as('fetchEchanges');        // Load the home page        cy.visit('/');        cy.wait(['@fetchUtilisateurId', '@fetchObjets', '@fetchEchanges']);    });    it('should display the header and a list of objects', () => {        // Check welcome header exists        cy.get('header').should('contain', 'Bienvenue ! Vous êtes connecté.');        // Check that both object cards are rendered        cy.get('.card').should('have.length', 2);        cy.get('.card').first().find('h2').should('contain', 'Objet 1');        cy.get('.card').eq(1).find('h2').should('contain', 'Objet 2');    });    it('should filter objects by search text', () => {        // Type search text that matches "Objet 1"        cy.get('input[placeholder="Rechercher par texte"]').type('Objet 1');        // Submit search form        cy.get('form.search-bar').submit();        // Only matching card should be visible        cy.get('.card').should('have.length', 1);        cy.get('.card').first().find('h2').should('contain', 'Objet 1');    });    it('should filter objects by user', () => {        // Type search text that matches the user "User 456"        cy.get('input[placeholder="Rechercher par utilisateur"]').type('User 456');        // Submit search form        cy.get('form.search-bar').submit();        // Only matching card should be visible        cy.get('.card').should('have.length', 1);        cy.get('.card').first().find('h2').should('contain', 'Objet 2');    });    it('should filter objects by category', () => {        // Wait for options to render then use the second option        cy.get('select').find('option').then(options => {            expect(options.length).to.be.greaterThan(1);            // Assuming the second option corresponds to "Catégorie 1"            const optionText = options.eq(1).text().trim();            cy.get('select').select(optionText);        });        // Submit search form        cy.get('form.search-bar').submit();        // Only matching card should appear        cy.get('.card').should('have.length', 1);        cy.get('.card').first().find('h2').should('contain', 'Objet 1');    });    it('should reset search filters', () => {        // Set search criteria for text and category        cy.get('input[placeholder="Rechercher par texte"]').type('Objet');        cy.get('select').find('option').then(options => {            expect(options.length).to.be.greaterThan(1);            // Assuming that the third option corresponds to "Catégorie 2"            const optionText = options.eq(2).text().trim();            cy.get('select').select(optionText);        });        // Click reset button and check that both objects are shown        cy.get('button[type="reset"]').click();        cy.get('.card').should('have.length', 2);    });    it('should logout and redirect to login page', () => {        // Click the logout button in the header (using a regex to match different possible labels)        cy.get('header').contains(/logout|déconnexion/i).click();        // Verify that the URL includes "/login"        cy.url().should('include', '/login');        // Verify token removal from local storage        cy.window().its('localStorage.authToken').should('be.empty');    });});